// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bls.proto

/*
Package bls is a generated protocol buffer package.

It is generated from these files:
	bls.proto

It has these top-level messages:
	SignRequest
	SignReply
	SendSignature
*/
package bls

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignRequest struct {
	// string data = 1;
	SharedParams string `protobuf:"bytes,1,opt,name=sharedParams" json:"sharedParams,omitempty"`
	SharedG      []byte `protobuf:"bytes,2,opt,name=sharedG,proto3" json:"sharedG,omitempty"`
}

func (m *SignRequest) Reset()                    { *m = SignRequest{} }
func (m *SignRequest) String() string            { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()               {}
func (*SignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SignRequest) GetSharedParams() string {
	if m != nil {
		return m.SharedParams
	}
	return ""
}

func (m *SignRequest) GetSharedG() []byte {
	if m != nil {
		return m.SharedG
	}
	return nil
}

type SignReply struct {
	Data      string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Publickey []byte `protobuf:"bytes,3,opt,name=publickey,proto3" json:"publickey,omitempty"`
}

func (m *SignReply) Reset()                    { *m = SignReply{} }
func (m *SignReply) String() string            { return proto.CompactTextString(m) }
func (*SignReply) ProtoMessage()               {}
func (*SignReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SignReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignReply) GetPublickey() []byte {
	if m != nil {
		return m.Publickey
	}
	return nil
}

type SendSignature struct {
	SharedParams string `protobuf:"bytes,1,opt,name=sharedParams" json:"sharedParams,omitempty"`
	SharedG      []byte `protobuf:"bytes,2,opt,name=sharedG,proto3" json:"sharedG,omitempty"`
	Data         string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Signature    []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SendSignature) Reset()                    { *m = SendSignature{} }
func (m *SendSignature) String() string            { return proto.CompactTextString(m) }
func (*SendSignature) ProtoMessage()               {}
func (*SendSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendSignature) GetSharedParams() string {
	if m != nil {
		return m.SharedParams
	}
	return ""
}

func (m *SendSignature) GetSharedG() []byte {
	if m != nil {
		return m.SharedG
	}
	return nil
}

func (m *SendSignature) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SendSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignRequest)(nil), "bls.SignRequest")
	proto.RegisterType((*SignReply)(nil), "bls.SignReply")
	proto.RegisterType((*SendSignature)(nil), "bls.SendSignature")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SignService service

type SignServiceClient interface {
	SignString(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error)
	SendSign(ctx context.Context, in *SendSignature, opts ...grpc.CallOption) (*SignReply, error)
}

type signServiceClient struct {
	cc *grpc.ClientConn
}

func NewSignServiceClient(cc *grpc.ClientConn) SignServiceClient {
	return &signServiceClient{cc}
}

func (c *signServiceClient) SignString(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := grpc.Invoke(ctx, "/bls.SignService/SignString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) SendSign(ctx context.Context, in *SendSignature, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := grpc.Invoke(ctx, "/bls.SignService/SendSign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SignService service

type SignServiceServer interface {
	SignString(context.Context, *SignRequest) (*SignReply, error)
	SendSign(context.Context, *SendSignature) (*SignReply, error)
}

func RegisterSignServiceServer(s *grpc.Server, srv SignServiceServer) {
	s.RegisterService(&_SignService_serviceDesc, srv)
}

func _SignService_SignString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SignString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bls.SignService/SignString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SignString(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_SendSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SendSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bls.SignService/SendSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SendSign(ctx, req.(*SendSignature))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bls.SignService",
	HandlerType: (*SignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignString",
			Handler:    _SignService_SignString_Handler,
		},
		{
			MethodName: "SendSign",
			Handler:    _SignService_SendSign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bls.proto",
}

func init() { proto.RegisterFile("bls.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x25, 0xa4, 0x02, 0x7c, 0x14, 0x84, 0x6e, 0xb2, 0x10, 0x43, 0xe5, 0xa9, 0x53, 0x55, 0xc1,
	0x47, 0x30, 0xb0, 0xa0, 0x78, 0x64, 0xb2, 0x9b, 0x53, 0xb0, 0x30, 0xae, 0x6b, 0x3b, 0x48, 0x99,
	0xf8, 0x75, 0xd4, 0xb8, 0x09, 0x01, 0xc4, 0xd4, 0xcd, 0xef, 0x3d, 0xdf, 0xe9, 0xbd, 0x77, 0xc0,
	0xb4, 0x8d, 0x2b, 0x1f, 0xb6, 0x69, 0x8b, 0xa5, 0xb6, 0x51, 0x3c, 0xc1, 0xa5, 0x34, 0x8d, 0xab,
	0x68, 0xd7, 0x52, 0x4c, 0x28, 0x60, 0x1e, 0x5f, 0x55, 0xa0, 0xfa, 0x59, 0x05, 0xf5, 0x1e, 0x79,
	0xb1, 0x28, 0x96, 0xac, 0xfa, 0xc1, 0x21, 0x87, 0xf3, 0x8c, 0x1f, 0xf9, 0xe9, 0xa2, 0x58, 0xce,
	0xab, 0x01, 0x8a, 0x17, 0x60, 0x79, 0x99, 0xb7, 0x1d, 0x22, 0xcc, 0x6a, 0x95, 0xd4, 0x61, 0x45,
	0xff, 0xc6, 0x3b, 0x60, 0xd1, 0x34, 0x4e, 0xa5, 0x36, 0xd0, 0x61, 0xf8, 0x9b, 0xd8, 0xab, 0xbe,
	0xd5, 0xd6, 0x6c, 0xde, 0xa8, 0xe3, 0x65, 0x56, 0x47, 0x42, 0x7c, 0xc2, 0x95, 0x24, 0x57, 0xcb,
	0xf1, 0xfb, 0x51, 0x5e, 0x47, 0x7b, 0xe5, 0x7f, 0xf6, 0x66, 0xbf, 0xec, 0xdd, 0xef, 0x72, 0x55,
	0x92, 0xc2, 0x87, 0xd9, 0x10, 0xae, 0x01, 0x7a, 0x98, 0x82, 0x71, 0x0d, 0xde, 0xac, 0xf6, 0xc5,
	0x4e, 0xaa, 0xbc, 0xbd, 0x9e, 0x30, 0xde, 0x76, 0xe2, 0x04, 0xd7, 0x70, 0x31, 0x24, 0x40, 0xcc,
	0xea, 0x34, 0xd0, 0xdf, 0x09, 0x7d, 0xd6, 0x5f, 0xea, 0xe1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x93,
	0x82, 0x82, 0xb7, 0xb6, 0x01, 0x00, 0x00,
}
